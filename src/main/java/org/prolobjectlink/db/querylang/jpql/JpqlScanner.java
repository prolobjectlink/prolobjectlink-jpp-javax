/* The following code was generated by JFlex 1.6.0 */

/*
 * #%L
 * prolobjectlink-jpp-javax
 * %%
 * Copyright (C) 2019 Prolobjectlink Project
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

package org.prolobjectlink.db.querylang.jpql;

import java.io.IOException;
import java.io.StringReader;

import org.prolobjectlink.db.querylang.Scanner;
import org.prolobjectlink.db.querylang.SymbolEntry;
import org.prolobjectlink.db.querylang.SymbolTable;
import org.prolobjectlink.logging.LoggerConstants;
import org.prolobjectlink.logging.LoggerUtils;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.6.0 from the specification file
 * <tt>${basedir}/src/main/jflex/JpqlScanner.flex</tt>
 */

public class JpqlScanner extends JpqlSymbols implements Scanner {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int YYINITIAL = 0;
	public static final int STRING = 2;
	public static final int CHARLITERAL = 4;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1, 2, 2 };

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\7\1\3\1\2\1\105\1\106\1\1\16\7\4\0\1\3\1\0"
			+ "\1\24\1\0\1\6\2\0\1\25\1\64\1\65\1\5\1\23\1\63" + "\1\67\1\21\1\4\1\10\1\16\1\73\1\15\1\74\1\17\1\77"
			+ "\1\75\1\76\1\11\1\62\1\0\1\71\1\70\1\72\1\66\1\0" + "\1\40\1\51\1\32\1\37\1\36\1\27\1\50\1\43\1\34\1\54"
			+ "\1\55\1\44\1\47\1\31\1\35\1\46\1\61\1\45\1\41\1\33" + "\1\30\1\53\1\42\1\56\1\52\1\57\1\0\1\26\2\0\1\60"
			+ "\1\0\1\14\1\101\1\14\1\100\1\22\1\20\5\6\1\12\1\6" + "\1\103\3\6\1\104\1\6\1\102\3\6\1\13\2\6\4\0\6\7"
			+ "\1\107\32\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6" + "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6"
			+ "\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0" + "\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0"
			+ "\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0" + "\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7\1\0"
			+ "\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0" + "\3\6\15\0\5\7\6\0\1\6\4\0\13\7\5\0\53\6\37\7"
			+ "\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6" + "\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7"
			+ "\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7" + "\41\6\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6\11\7"
			+ "\1\6\3\7\1\6\5\7\22\0\31\6\3\7\104\0\1\6\1\0" + "\13\6\67\0\33\7\1\0\4\7\66\6\3\7\1\6\22\7\1\6"
			+ "\7\7\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6\1\0" + "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"
			+ "\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0" + "\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0"
			+ "\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0\2\6" + "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6"
			+ "\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7" + "\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7"
			+ "\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6" + "\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7"
			+ "\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0" + "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"
			+ "\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0" + "\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7"
			+ "\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0" + "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0"
			+ "\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0" + "\1\6\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7\1\0"
			+ "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0" + "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\6"
			+ "\6\0\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6\1\0" + "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6"
			+ "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0" + "\2\6\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0\10\6"
			+ "\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7\1\0" + "\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7\12\0"
			+ "\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0" + "\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0"
			+ "\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6" + "\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0"
			+ "\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0" + "\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7"
			+ "\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0" + "\12\7\2\0\4\6\40\0\1\6\27\0\2\7\6\0\12\7\13\0"
			+ "\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6" + "\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7"
			+ "\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7" + "\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7"
			+ "\2\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6" + "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6"
			+ "\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6" + "\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6"
			+ "\2\0\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6" + "\1\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6"
			+ "\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0" + "\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6"
			+ "\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0" + "\51\6\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0"
			+ "\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\21\7" + "\7\6\2\7\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7"
			+ "\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\6\130\0\5\7" + "\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6"
			+ "\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0\12\7" + "\3\0\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7"
			+ "\4\6\3\7\2\6\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0" + "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0"
			+ "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0" + "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0"
			+ "\15\6\5\0\3\6\1\0\7\6\16\0\5\7\30\0\1\105\1\105" + "\5\7\20\0\2\6\23\0\1\6\13\0\5\7\5\0\6\7\1\0"
			+ "\1\6\15\0\1\6\20\0\15\6\3\0\33\6\25\0\15\7\4\0" + "\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0"
			+ "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0" + "\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0"
			+ "\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7" + "\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0"
			+ "\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6" + "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"
			+ "\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0" + "\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0"
			+ "\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0"
			+ "\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0"
			+ "\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0\12\7" + "\1\0\31\6\7\0\1\7\120\6\2\7\45\0\11\6\2\0\147\6"
			+ "\2\0\4\6\1\0\4\6\14\0\13\6\115\0\12\6\1\7\3\6" + "\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0"
			+ "\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6" + "\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0"
			+ "\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7\11\0" + "\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6"
			+ "\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7" + "\1\6\1\7\1\6\30\0\3\6\2\0\13\6\5\7\2\0\3\6"
			+ "\2\7\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0" + "\7\6\221\0\43\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6"
			+ "\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6" + "\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6"
			+ "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6" + "\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\7\7"
			+ "\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6" + "\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6"
			+ "\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6" + "\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0\14\6"
			+ "\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6" + "\42\0\173\6\105\0\65\6\210\0\1\7\202\0\35\6\3\0\61\6"
			+ "\57\0\37\6\21\0\33\6\65\0\36\6\2\0\44\6\4\0\10\6" + "\1\0\5\6\52\0\236\6\2\0\12\7\u0356\0\6\6\2\0\1\6"
			+ "\1\0\54\6\1\0\2\6\3\0\1\6\2\0\27\6\252\0\26\6" + "\12\0\32\6\106\0\70\6\6\0\2\6\100\0\1\6\3\7\1\0"
			+ "\2\7\5\0\4\7\4\6\1\0\3\6\1\0\33\6\4\0\3\7" + "\4\0\1\7\40\0\35\6\203\0\66\6\12\0\26\6\12\0\23\6"
			+ "\215\0\111\6\u03b7\0\3\7\65\6\17\7\37\0\12\7\20\0\3\7" + "\55\6\13\7\2\0\1\7\22\0\31\6\7\0\12\7\6\0\3\7"
			+ "\44\6\16\7\1\0\12\7\100\0\3\7\60\6\16\7\4\6\13\0"
			+ "\12\7\u04a6\0\53\6\15\7\10\0\12\7\u0936\0\u036f\6\221\0\143\6"
			+ "\u0b9d\0\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6\13\0\1\6\56\7\20\0"
			+ "\4\7\15\6\u4060\0\2\6\u2163\0\5\7\3\0\26\7\2\0\7\7"
			+ "\36\0\4\7\224\0\3\7\u01bb\0\125\6\1\0\107\6\1\0\2\6" + "\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6"
			+ "\1\0\7\6\1\0\101\6\1\0\4\6\2\0\10\6\1\0\7\6" + "\1\0\34\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0\7\6"
			+ "\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6\1\0\31\6" + "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6"
			+ "\1\0\31\6\1\0\10\6\2\0\62\7\u1600\0\4\6\1\0\33\6" + "\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6"
			+ "\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6" + "\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1\6"
			+ "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6" + "\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0\4\6"
			+ "\1\0\1\6\1\0\12\6\1\0\21\6\5\0\3\6\1\0\5\6"
			+ "\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\u3fe2\0\u021e\6"
			+ "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"
			+ "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"
			+ "\1\10\1\11\1\12\24\5\1\13\1\14\1\15\1\16" + "\1\17\1\20\1\21\1\22\1\23\1\24\2\25\1\26"
			+ "\2\1\2\27\1\1\1\0\1\2\1\0\1\30\1\31" + "\1\32\1\0\3\30\1\33\1\31\1\0\1\34\15\5"
			+ "\1\35\1\36\1\37\1\5\1\40\1\41\11\5\1\42" + "\24\5\1\43\3\5\1\0\1\44\1\45\1\46\1\47"
			+ "\2\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57" + "\1\60\1\61\12\47\1\0\1\62\2\63\2\30\1\31"
			+ "\1\0\6\5\1\64\1\65\20\5\1\66\7\5\1\67" + "\1\70\1\71\1\72\1\73\1\74\1\75\3\5\1\76"
			+ "\12\5\1\77\1\100\1\5\1\101\5\5\1\102\1\0" + "\1\50\1\0\1\103\1\0\1\104\1\105\1\106\1\107"
			+ "\1\110\1\111\1\112\1\113\1\114\1\63\2\30\2\5" + "\1\115\7\5\1\116\1\117\1\120\2\5\1\121\7\5"
			+ "\1\122\3\5\1\123\2\5\1\124\1\125\1\5\1\126" + "\1\127\2\5\1\130\2\5\1\131\4\5\1\132\2\5"
			+ "\1\133\1\0\1\63\2\30\1\5\1\134\1\5\1\135" + "\2\5\1\136\2\5\1\137\1\5\1\140\1\141\1\142"
			+ "\1\143\1\5\1\144\1\5\1\145\5\5\1\146\2\5" + "\1\147\3\5\1\150\1\5\1\151\1\0\1\63\2\30"
			+ "\1\5\1\152\1\153\1\5\1\154\2\5\1\155\1\156" + "\1\157\1\5\1\160\1\5\1\161\1\162\1\163\1\164"
			+ "\1\5\1\165\1\5\1\0\1\63\2\30\6\5\1\166" + "\1\167\1\0\1\63\2\30\1\170\1\5\1\171\1\172"
			+ "\1\173\1\5\1\0\1\63\2\30\2\5\1\174\1\0" + "\1\63\2\30\2\5\2\0\2\30\2\5\1\175\1\0"
			+ "\2\30\1\176\1\177\1\0\2\30\1\5\1\0\2\30" + "\1\5\1\0\2\30\1\5\1\0\2\30\1\5\1\0"
			+ "\1\30\1\31\1\200\1\0\5\31";

	private static int[] zzUnpackAction() {
		int[] result = new int[418];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\110\0\220\0\330\0\u0120\0\330\0\u0168\0\330"
			+ "\0\u01b0\0\u01f8\0\u0240\0\u0288\0\330\0\330\0\330\0\u02d0"
			+ "\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510"
			+ "\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750"
			+ "\0\u0798\0\u07e0\0\u0828\0\330\0\330\0\330\0\330\0\330"
			+ "\0\u0870\0\u08b8\0\u0900\0\330\0\u0948\0\u0990\0\330\0\330"
			+ "\0\u09d8\0\u0a20\0\u0a68\0\330\0\u0ab0\0\u0a20\0\u0af8\0\u0b40"
			+ "\0\u0b88\0\u0bd0\0\330\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\330"
			+ "\0\u0d38\0\u0d80\0\330\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8"
			+ "\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128"
			+ "\0\u1170\0\u01b0\0\u01b0\0\u11b8\0\u01b0\0\u1200\0\u1248\0\u1290"
			+ "\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8\0\u1440\0\u1488\0\u14d0"
			+ "\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u1710"
			+ "\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878\0\u18c0\0\u1908\0\u1950"
			+ "\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u01b0\0\u1ab8\0\u1b00\0\u1b48"
			+ "\0\u1b90\0\330\0\330\0\330\0\330\0\u1bd8\0\u1c20\0\330"
			+ "\0\330\0\330\0\330\0\330\0\330\0\330\0\330\0\330"
			+ "\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60"
			+ "\0\u1ea8\0\u1ef0\0\u1f38\0\330\0\u1f80\0\u1fc8\0\u2010\0\u2058"
			+ "\0\u20a0\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298"
			+ "\0\u01b0\0\u01b0\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448"
			+ "\0\u2490\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688"
			+ "\0\u26d0\0\u2718\0\u01b0\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u2880"
			+ "\0\u28c8\0\u2910\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0"
			+ "\0\u01b0\0\u2958\0\u29a0\0\u29e8\0\u01b0\0\u2a30\0\u2a78\0\u2ac0"
			+ "\0\u2b08\0\u2b50\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u01b0"
			+ "\0\u01b0\0\u2d00\0\u01b0\0\u2d48\0\u2d90\0\u2dd8\0\u2e20\0\u2e68"
			+ "\0\u01b0\0\u2eb0\0\330\0\u1cb0\0\330\0\u2ef8\0\330\0\330"
			+ "\0\330\0\330\0\330\0\330\0\330\0\330\0\330\0\u2f40"
			+ "\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u01b0\0\u30a8\0\u30f0\0\u3138"
			+ "\0\u3180\0\u31c8\0\u3210\0\u3258\0\u01b0\0\u01b0\0\u01b0\0\u32a0"
			+ "\0\u32e8\0\u01b0\0\u3330\0\u3378\0\u33c0\0\u3408\0\u3450\0\u3498"
			+ "\0\u34e0\0\u01b0\0\u3528\0\u3570\0\u35b8\0\u01b0\0\u3600\0\u3648"
			+ "\0\u01b0\0\u01b0\0\u3690\0\u01b0\0\u01b0\0\u36d8\0\u3720\0\u01b0"
			+ "\0\u3768\0\u37b0\0\u01b0\0\u37f8\0\u3840\0\u3888\0\u38d0\0\u01b0"
			+ "\0\u3918\0\u3960\0\u01b0\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\u3ac8"
			+ "\0\u01b0\0\u3b10\0\u01b0\0\u3b58\0\u3ba0\0\u01b0\0\u3be8\0\u3c30"
			+ "\0\u01b0\0\u3c78\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u3cc0\0\u01b0"
			+ "\0\u3d08\0\u01b0\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70\0\u01b0"
			+ "\0\u3eb8\0\u3f00\0\u01b0\0\u3f48\0\u3f90\0\u3fd8\0\u01b0\0\u4020"
			+ "\0\u01b0\0\u4068\0\u40b0\0\u40f8\0\u4140\0\u4188\0\u01b0\0\u01b0"
			+ "\0\u41d0\0\u01b0\0\u4218\0\u4260\0\u01b0\0\u01b0\0\u01b0\0\u42a8"
			+ "\0\u01b0\0\u42f0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u4338\0\u01b0"
			+ "\0\u4380\0\u43c8\0\u4410\0\u4458\0\u44a0\0\u44e8\0\u4530\0\u4578"
			+ "\0\u45c0\0\u4608\0\u4650\0\u01b0\0\u01b0\0\u4698\0\u46e0\0\u4728"
			+ "\0\u4770\0\u01b0\0\u47b8\0\u01b0\0\u01b0\0\u01b0\0\u4800\0\u4848"
			+ "\0\u4890\0\u48d8\0\u4920\0\u4968\0\u49b0\0\u01b0\0\u49f8\0\u4a40"
			+ "\0\u4a88\0\u4ad0\0\u4b18\0\u4b60\0\u4ba8\0\u4bf0\0\u4c38\0\u4c80"
			+ "\0\u4cc8\0\u4d10\0\330\0\u4d58\0\u4da0\0\u4de8\0\u4e30\0\u01b0"
			+ "\0\u4e78\0\u4ec0\0\u4f08\0\u4f50\0\u4f98\0\u4fe0\0\u5028\0\u5070"
			+ "\0\u50b8\0\u5100\0\u5148\0\u5190\0\u51d8\0\u5220\0\u5268\0\u52b0"
			+ "\0\u52f8\0\u5340\0\u5340\0\u01b0\0\u5388\0\u53d0\0\u5418\0\u5460" + "\0\u54a8\0\u54f0";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[418];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"
			+ "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16" + "\1\17\1\4\1\20\1\21\1\22\1\23\1\24\1\25"
			+ "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35" + "\2\11\1\36\1\37\1\40\1\11\1\41\1\42\1\43"
			+ "\4\11\1\44\1\45\1\46\1\47\1\50\1\51\1\52" + "\1\53\1\54\5\13\5\11\1\0\1\6\1\0\1\55"
			+ "\1\56\1\57\21\55\1\60\1\55\1\61\61\55\1\62" + "\1\63\1\64\22\62\1\4\1\65\56\62\3\66\112\0"
			+ "\1\6\111\0\1\67\1\70\110\0\13\11\1\0\1\11" + "\4\0\33\11\11\0\12\11\2\0\1\11\10\0\1\71"
			+ "\1\72\1\73\1\74\1\0\1\75\1\76\1\77\1\100" + "\1\101\1\102\4\0\1\100\6\0\1\102\1\103\4\0"
			+ "\1\73\11\0\1\74\14\0\1\75\2\77\1\72\1\77" + "\1\103\17\0\2\13\1\73\2\0\3\13\1\100\1\101"
			+ "\1\102\4\0\1\100\6\0\1\102\1\103\4\0\1\73" + "\26\0\5\13\1\103\17\0\2\101\3\0\3\101\53\0"
			+ "\5\101\16\0\13\11\1\0\1\11\4\0\1\11\1\104" + "\5\11\1\105\6\11\1\106\14\11\11\0\12\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\17\11\1\107" + "\13\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\1\11\1\110\4\11\1\111\1\112\23\11" + "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\1\11\1\113\4\11\1\114\2\11\1\115\21\11" + "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\14\11\1\116\1\11\1\117\4\11\1\120\7\11" + "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\2\11\1\121\7\11\1\122\20\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\123"
			+ "\1\124\1\125\13\11\1\126\3\11\1\127\10\11\11\0" + "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\2\11\1\130\7\11\1\131\2\11\1\132\2\11\1\133" + "\6\11\1\134\3\11\11\0\12\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\5\11\1\135\1\11\1\136" + "\23\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\2\11\1\137\7\11\1\140\2\11\1\141" + "\4\11\1\142\1\11\1\143\6\11\11\0\12\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\144" + "\3\11\1\145\1\146\1\147\22\11\1\150\11\0\12\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\14\11" + "\1\151\16\11\11\0\12\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\11\11\1\152\21\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"
			+ "\1\153\1\154\1\155\23\11\11\0\12\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\5\11\1\156\1\157"
			+ "\1\160\1\11\1\161\21\11\11\0\12\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\16\11\1\162\14\11"
			+ "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\6\11\1\163\1\164\13\11\1\165\7\11\11\0"
			+ "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\11\11\1\166\21\11\11\0\12\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\6\11\1\167\24\11\11\0" + "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\7\11\1\170\23\11\11\0\12\11\2\0\1\11\73\0" + "\1\171\106\0\1\172\105\0\1\173\1\0\1\174\15\0"
			+ "\1\55\2\0\21\55\1\0\1\55\1\0\61\55\2\0" + "\1\57\105\0\1\175\2\0\5\175\1\176\4\175\2\176"
			+ "\1\177\1\200\3\175\1\201\1\202\1\203\44\175\1\176" + "\2\177\1\175\1\177\1\175\1\204\1\205\1\206\1\207"
			+ "\30\0\1\210\64\0\1\64\105\0\1\175\2\0\5\175" + "\1\211\4\175\2\211\1\212\1\213\3\175\1\214\1\215"
			+ "\1\216\44\175\1\211\2\212\1\175\1\212\1\175\1\217" + "\1\220\1\221\1\222\3\0\1\67\1\5\1\6\105\67"
			+ "\5\70\1\223\102\70\10\0\1\71\1\72\1\224\2\0" + "\1\75\1\76\1\77\1\100\1\101\1\102\4\0\1\100"
			+ "\6\0\1\102\1\103\4\0\1\224\26\0\1\75\2\77" + "\1\72\1\77\1\103\17\0\2\72\3\0\3\72\1\100"
			+ "\1\101\1\102\4\0\1\100\6\0\1\102\1\103\33\0" + "\5\72\1\103\17\0\1\225\1\226\2\0\5\226\1\0"
			+ "\1\226\4\0\1\226\2\0\1\226\3\0\3\226\10\0" + "\1\226\21\0\7\226\16\0\1\227\1\72\1\224\2\0"
			+ "\3\227\1\100\1\101\1\102\4\0\1\100\6\0\1\102" + "\1\103\4\0\1\224\26\0\3\227\1\72\1\227\1\103"
			+ "\17\0\1\77\1\72\1\224\2\0\3\77\1\100\1\101" + "\1\102\4\0\1\100\6\0\1\102\1\103\4\0\1\224"
			+ "\26\0\3\77\1\72\1\77\1\103\17\0\1\230\1\72" + "\1\224\2\0\3\230\1\100\1\101\1\102\4\0\1\100"
			+ "\6\0\1\102\1\103\4\0\1\224\26\0\3\230\1\72" + "\1\230\1\103\17\0\2\101\3\0\3\101\1\100\1\0"
			+ "\1\102\4\0\1\100\6\0\1\102\1\103\33\0\5\101" + "\1\103\17\0\2\231\3\0\3\231\3\0\1\232\43\0"
			+ "\1\232\3\0\5\231\16\0\13\11\1\0\1\11\4\0" + "\2\11\1\233\30\11\11\0\12\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\4\11\1\234\26\11\11\0" + "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\6\11\1\235\24\11\11\0\12\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\10\11\1\236\6\11\1\237"
			+ "\13\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\15\11\1\240\15\11\11\0\12\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\241" + "\26\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\13\11\1\242\17\11\11\0\12\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\243"
			+ "\14\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\1\11\1\244\1\245\6\11\1\246\21\11"
			+ "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\12\11\1\247\20\11\11\0\12\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\7\11\1\250\23\11" + "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\5\11\1\251\1\11\1\252\1\11\1\253\21\11" + "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\17\11\1\254\13\11\11\0\12\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\2\11\1\255\5\11"
			+ "\1\256\22\11\11\0\12\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\4\11\1\257\26\11\11\0\12\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11" + "\1\260\22\11\11\0\12\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\25\11\1\261\5\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11"
			+ "\1\262\3\11\1\263\22\11\11\0\12\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\3\11\1\264\27\11"
			+ "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\12\11\1\265\20\11\11\0\12\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\17\11\1\266\13\11" + "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\5\11\1\267\25\11\11\0\12\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\12\11\1\270\20\11"
			+ "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\12\11\1\271\2\11\1\272\15\11\11\0\12\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11" + "\1\273\12\11\1\274\7\11\11\0\12\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\3\11\1\275\27\11" + "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\15\11\1\276\15\11\11\0\12\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\12\11\1\277\20\11"
			+ "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\21\11\1\300\11\11\11\0\12\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\20\11\1\301\1\11" + "\1\302\10\11\11\0\12\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\30\11\1\303\2\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\20\11"
			+ "\1\304\12\11\11\0\12\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\4\11\1\305\10\11\1\306\15\11"
			+ "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\16\11\1\307\14\11\11\0\12\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\7\11\1\310\23\11" + "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\24\11\1\311\6\11\11\0\12\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\26\11\1\312\4\11"
			+ "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\3\11\1\313\7\11\1\314\17\11\11\0\12\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\315" + "\1\11\1\316\6\11\1\317\21\11\11\0\12\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\2\11\1\320" + "\30\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\10\11\1\321\22\11\11\0\12\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\20\11\1\322"
			+ "\12\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\27\11\1\323\3\11\11\0\12\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\6\11\1\324" + "\24\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\4\11\1\325\26\11\11\0\12\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\326"
			+ "\26\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\15\11\1\327\15\11\11\0\12\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\5\11\1\330" + "\25\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\23\11\1\331\7\11\11\0\12\11\2\0" + "\1\11\16\0\1\332\101\0\1\177\4\0\3\177\53\0"
			+ "\3\177\1\0\1\177\20\0\1\333\4\0\3\333\53\0" + "\3\333\1\0\1\333\20\0\1\334\4\0\3\334\5\0"
			+ "\1\335\45\0\3\334\1\0\1\334\20\0\1\336\4\0" + "\3\336\5\0\1\335\45\0\3\336\1\0\1\336\35\0"
			+ "\1\337\107\0\1\340\107\0\1\341\107\0\1\342\107\0" + "\1\343\107\0\1\344\107\0\1\345\107\0\1\346\62\0"
			+ "\4\70\1\6\1\223\102\70\10\0\1\225\1\226\1\347" + "\1\0\5\226\1\0\1\226\4\0\1\226\2\0\1\226"
			+ "\3\0\3\226\3\0\1\347\4\0\1\226\21\0\7\226" + "\16\0\2\350\1\347\1\0\5\350\1\0\1\350\4\0"
			+ "\1\350\2\0\1\350\3\0\3\350\3\0\1\347\4\0" + "\1\350\21\0\7\350\16\0\1\351\1\72\1\224\2\0"
			+ "\3\351\1\100\1\101\1\102\4\0\1\100\6\0\1\102" + "\1\103\4\0\1\224\26\0\3\351\1\72\1\351\1\103"
			+ "\17\0\1\352\1\72\1\224\2\0\3\352\1\100\1\101" + "\1\102\4\0\1\100\6\0\1\102\1\103\4\0\1\224"
			+ "\26\0\3\352\1\72\1\352\1\103\17\0\2\231\3\0" + "\3\231\1\100\6\0\1\100\7\0\1\103\33\0\5\231"
			+ "\1\103\17\0\2\231\3\0\3\231\53\0\5\231\16\0" + "\13\11\1\0\1\11\4\0\3\11\1\353\27\11\11\0"
			+ "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\3\11\1\354\27\11\11\0\12\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\20\11\1\355\12\11\11\0" + "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\11\11\1\356\21\11\11\0\12\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\7\11\1\357\23\11\11\0"
			+ "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\15\11\1\360\15\11\11\0\12\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\16\11\1\361\14\11\11\0" + "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\2\11\1\362\30\11\11\0\12\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\3\11\1\363\27\11\11\0"
			+ "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\15\11\1\364\15\11\11\0\12\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\7\11\1\365\23\11\11\0" + "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\2\11\1\366\30\11\11\0\12\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\20\11\1\367\12\11\11\0"
			+ "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\11\11\1\370\21\11\11\0\12\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\5\11\1\371\25\11\11\0" + "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\7\11\1\372\23\11\11\0\12\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\7\11\1\373\23\11\11\0"
			+ "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\7\11\1\374\23\11\11\0\12\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\7\11\1\375\23\11\11\0" + "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\7\11\1\376\23\11\11\0\12\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\7\11\1\377\23\11\11\0"
			+ "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\16\11\1\u0100\14\11\11\0\12\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\11\11\1\u0101\21\11\11\0" + "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\7\11\1\u0102\23\11\11\0\12\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\4\11\1\u0103\26\11\11\0"
			+ "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\12\11\1\u0104\20\11\11\0\12\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\4\11\1\u0105\26\11\11\0" + "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\3\11\1\u0106\27\11\11\0\12\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\7\11\1\u0107\23\11\11\0"
			+ "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\12\11\1\u0108\20\11\11\0\12\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\7\11\1\u0109\23\11\11\0" + "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\7\11\1\u010a\23\11\11\0\12\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\7\11\1\u010b\23\11\11\0"
			+ "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\4\11\1\u010c\26\11\11\0\12\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\2\11\1\u010d\13\11\1\u010e" + "\14\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\5\11\1\u010f\25\11\11\0\12\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\u0110"
			+ "\23\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\11\11\1\u0111\21\11\11\0\12\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\u0112" + "\23\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\4\11\1\u0113\26\11\11\0\12\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\21\11\1\u0114"
			+ "\11\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\10\11\1\u0115\22\11\11\0\12\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\22\11\1\u0116" + "\10\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\1\11\1\u0117\31\11\11\0\12\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\14\11\1\u0118"
			+ "\16\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0" + "\1\11\4\0\13\11\1\u0119\17\11\11\0\12\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\1\11\1\u011a" + "\31\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\2\11\1\u011b\30\11\11\0\12\11\2\0" + "\1\11\74\0\1\u011c\40\0\1\335\72\0\2\u011d\1\347"
			+ "\1\0\5\u011d\1\0\1\u011d\4\0\1\u011d\2\0\1\u011d" + "\3\0\3\u011d\3\0\1\347\4\0\1\u011d\21\0\7\u011d"
			+ "\16\0\1\u011e\1\72\1\224\2\0\3\u011e\1\100\1\101" + "\1\102\4\0\1\100\6\0\1\102\1\103\4\0\1\224"
			+ "\26\0\3\u011e\1\72\1\u011e\1\103\17\0\1\u011f\1\72" + "\1\224\2\0\3\u011f\1\100\1\101\1\102\4\0\1\100"
			+ "\6\0\1\102\1\103\4\0\1\224\26\0\3\u011f\1\72" + "\1\u011f\1\103\15\0\13\11\1\0\1\11\4\0\4\11"
			+ "\1\u0120\26\11\11\0\12\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\14\11\1\u0121\16\11\11\0\12\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11" + "\1\u0122\26\11\11\0\12\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\16\11\1\u0123\14\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"
			+ "\1\u0124\25\11\11\0\12\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\7\11\1\u0125\23\11\11\0\12\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11" + "\1\u0126\26\11\11\0\12\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\11\11\1\u0127\21\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\7\11"
			+ "\1\u0128\23\11\11\0\12\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\4\11\1\u0129\26\11\11\0\12\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\15\11" + "\1\u012a\15\11\11\0\12\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\16\11\1\u012b\14\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\27\11"
			+ "\1\u012c\3\11\11\0\12\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\16\11\1\u012d\14\11\11\0\12\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\16\11" + "\1\u012e\14\11\11\0\12\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\3\11\1\u012f\27\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\23\11"
			+ "\1\u0130\7\11\11\0\12\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\17\11\1\u0131\13\11\11\0\12\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\23\11" + "\1\u0132\7\11\11\0\12\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\4\11\1\u0133\26\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\5\11"
			+ "\1\u0134\25\11\11\0\12\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\4\11\1\u0135\26\11\11\0\12\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11" + "\1\u0136\26\11\11\0\12\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\3\11\1\u0137\27\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\7\11"
			+ "\1\u0138\23\11\11\0\12\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\2\11\1\u0139\30\11\11\0\12\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11" + "\1\u013a\26\11\11\0\12\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\16\11\1\u013b\14\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11"
			+ "\1\u013c\26\11\11\0\12\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\5\11\1\u013d\25\11\11\0\12\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\7\11" + "\1\u013e\23\11\11\0\12\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\17\11\1\u013f\13\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\7\11"
			+ "\1\u0140\23\11\11\0\12\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\7\11\1\u0141\23\11\11\0\12\11"
			+ "\2\0\1\11\75\0\1\u0142\22\0\2\u0143\1\347\1\0" + "\5\u0143\1\0\1\u0143\4\0\1\u0143\2\0\1\u0143\3\0"
			+ "\3\u0143\3\0\1\347\4\0\1\u0143\21\0\7\u0143\16\0" + "\1\u0144\1\72\1\224\2\0\3\u0144\1\100\1\101\1\102"
			+ "\4\0\1\100\6\0\1\102\1\103\4\0\1\224\26\0" + "\3\u0144\1\72\1\u0144\1\103\17\0\1\u0145\1\72\1\224"
			+ "\2\0\3\u0145\1\100\1\101\1\102\4\0\1\100\6\0" + "\1\102\1\103\4\0\1\224\26\0\3\u0145\1\72\1\u0145"
			+ "\1\103\15\0\13\11\1\0\1\11\4\0\5\11\1\u0146" + "\25\11\11\0\12\11\2\0\1\11\6\0\13\11\1\0"
			+ "\1\11\4\0\7\11\1\u0147\23\11\11\0\12\11\2\0" + "\1\11\6\0\13\11\1\0\1\11\4\0\1\u0148\32\11"
			+ "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\2\11\1\u0149\30\11\11\0\12\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\4\11\1\u014a\26\11" + "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\12\11\1\u014b\20\11\11\0\12\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\5\11\1\u014c\25\11"
			+ "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\4\11\1\u014d\26\11\11\0\12\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\7\11\1\u014e\23\11" + "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\12\11\1\u014f\20\11\11\0\12\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\2\11\1\u0150\30\11"
			+ "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\7\11\1\u0151\23\11\11\0\12\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\16\11\1\u0152\14\11" + "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\4\11\1\u0153\26\11\11\0\12\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\21\11\1\u0154\11\11"
			+ "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\7\11\1\u0155\23\11\11\0\12\11\2\0\1\11"
			+ "\6\0\13\11\1\0\1\11\4\0\14\11\1\u0156\16\11" + "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11"
			+ "\4\0\2\11\1\u0157\30\11\11\0\12\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\16\11\1\u0158\14\11"
			+ "\11\0\12\11\2\0\1\11\6\0\13\11\1\0\1\11" + "\4\0\7\11\1\u0159\23\11\11\0\12\11\2\0\1\11"
			+ "\74\0\1\u015a\23\0\2\u015b\1\347\1\0\5\u015b\1\0" + "\1\u015b\4\0\1\u015b\2\0\1\u015b\3\0\3\u015b\3\0"
			+ "\1\347\4\0\1\u015b\21\0\7\u015b\16\0\1\u015c\1\72" + "\1\224\2\0\3\u015c\1\100\1\101\1\102\4\0\1\100"
			+ "\6\0\1\102\1\103\4\0\1\224\26\0\3\u015c\1\72" + "\1\u015c\1\103\17\0\1\u015d\1\72\1\224\2\0\3\u015d"
			+ "\1\100\1\101\1\102\4\0\1\100\6\0\1\102\1\103" + "\4\0\1\224\26\0\3\u015d\1\72\1\u015d\1\103\15\0"
			+ "\13\11\1\0\1\11\4\0\6\11\1\u015e\24\11\11\0" + "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\4\11\1\u015f\26\11\11\0\12\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\3\11\1\u0160\27\11\11\0"
			+ "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\2\11\1\u0161\30\11\11\0\12\11\2\0\1\11\6\0"
			+ "\13\11\1\0\1\11\4\0\3\11\1\u0162\27\11\11\0" + "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"
			+ "\5\11\1\u0163\25\11\11\0\12\11\2\0\1\11\6\0" + "\13\11\1\0\1\11\4\0\21\11\1\u0164\11\11\11\0"
			+ "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\2\11\1\u0165\30\11\11\0\12\11\2\0\1\11\76\0"
			+ "\1\u0166\21\0\2\u0167\1\347\1\0\5\u0167\1\0\1\u0167" + "\4\0\1\u0167\2\0\1\u0167\3\0\3\u0167\3\0\1\347"
			+ "\4\0\1\u0167\21\0\7\u0167\16\0\1\u0168\1\72\1\224" + "\2\0\3\u0168\1\100\1\101\1\102\4\0\1\100\6\0"
			+ "\1\102\1\103\4\0\1\224\26\0\3\u0168\1\72\1\u0168" + "\1\103\17\0\1\u0169\1\72\1\224\2\0\3\u0169\1\100"
			+ "\1\101\1\102\4\0\1\100\6\0\1\102\1\103\4\0" + "\1\224\26\0\3\u0169\1\72\1\u0169\1\103\15\0\13\11"
			+ "\1\0\1\11\4\0\2\11\1\u016a\30\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\31\11"
			+ "\1\u016b\1\11\11\0\12\11\2\0\1\11\6\0\13\11" + "\1\0\1\11\4\0\7\11\1\u016c\23\11\11\0\12\11"
			+ "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\21\11" + "\1\u016d\11\11\11\0\12\11\2\0\1\11\6\0\13\11"
			+ "\1\0\1\11\4\0\4\11\1\u016e\26\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"
			+ "\1\u016f\30\11\11\0\12\11\2\0\1\11\15\0\1\u0170" + "\102\0\2\u0171\1\347\1\0\5\u0171\1\0\1\u0171\4\0"
			+ "\1\u0171\2\0\1\u0171\3\0\3\u0171\3\0\1\347\4\0" + "\1\u0171\21\0\7\u0171\16\0\1\u0172\1\72\1\224\2\0"
			+ "\3\u0172\1\100\1\101\1\102\4\0\1\100\6\0\1\102" + "\1\103\4\0\1\224\26\0\3\u0172\1\72\1\u0172\1\103"
			+ "\17\0\1\u0173\1\72\1\224\2\0\3\u0173\1\100\1\101" + "\1\102\4\0\1\100\6\0\1\102\1\103\4\0\1\224"
			+ "\26\0\3\u0173\1\72\1\u0173\1\103\15\0\13\11\1\0" + "\1\11\4\0\4\11\1\u0174\3\11\1\u0175\22\11\11\0"
			+ "\12\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0" + "\21\11\1\u0176\11\11\11\0\12\11\2\0\1\11\77\0"
			+ "\1\u0177\20\0\2\u0178\1\347\1\0\5\u0178\1\0\1\u0178" + "\4\0\1\u0178\2\0\1\u0178\3\0\3\u0178\3\0\1\347"
			+ "\4\0\1\u0178\21\0\7\u0178\16\0\1\u0179\1\72\1\224" + "\2\0\3\u0179\1\100\1\101\1\102\4\0\1\100\6\0"
			+ "\1\102\1\103\4\0\1\224\26\0\3\u0179\1\72\1\u0179" + "\1\103\17\0\1\u017a\1\72\1\224\2\0\3\u017a\1\100"
			+ "\1\101\1\102\4\0\1\100\6\0\1\102\1\103\4\0" + "\1\224\26\0\3\u017a\1\72\1\u017a\1\103\15\0\13\11"
			+ "\1\0\1\11\4\0\5\11\1\u017b\25\11\11\0\12\11" + "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11"
			+ "\1\u017c\21\11\11\0\12\11\2\0\1\11\74\0\1\u017d" + "\23\0\2\u017e\1\347\1\0\5\u017e\1\0\1\u017e\4\0"
			+ "\1\u017e\2\0\1\u017e\3\0\3\u017e\3\0\1\347\4\0" + "\1\u017e\21\0\7\u017e\16\0\1\u017f\1\72\1\224\2\0"
			+ "\3\u017f\1\100\1\101\1\102\4\0\1\100\6\0\1\102" + "\1\103\4\0\1\224\26\0\3\u017f\1\72\1\u017f\1\103"
			+ "\17\0\1\u0180\1\72\1\224\2\0\3\u0180\1\100\1\101" + "\1\102\4\0\1\100\6\0\1\102\1\103\4\0\1\224"
			+ "\26\0\3\u0180\1\72\1\u0180\1\103\15\0\13\11\1\0" + "\1\11\4\0\20\11\1\u0181\12\11\11\0\12\11\2\0"
			+ "\1\11\6\0\13\11\1\0\1\11\4\0\4\11\1\u0182" + "\26\11\11\0\12\11\2\0\1\11\76\0\1\u0183\21\0"
			+ "\2\u0184\1\347\1\0\5\u0184\1\0\1\u0184\4\0\1\u0184" + "\2\0\1\u0184\3\0\3\u0184\3\0\1\347\4\0\1\u0184"
			+ "\21\0\7\u0184\16\0\1\u0185\1\72\1\224\2\0\3\u0185" + "\1\100\1\101\1\102\4\0\1\100\6\0\1\102\1\103"
			+ "\4\0\1\224\26\0\3\u0185\1\72\1\u0185\1\103\17\0" + "\1\u0186\1\72\1\224\2\0\3\u0186\1\100\1\101\1\102"
			+ "\4\0\1\100\6\0\1\102\1\103\4\0\1\224\26\0" + "\3\u0186\1\72\1\u0186\1\103\15\0\13\11\1\0\1\11"
			+ "\4\0\7\11\1\u0187\23\11\11\0\12\11\2\0\1\11" + "\6\0\13\11\1\0\1\11\4\0\7\11\1\u0188\23\11"
			+ "\11\0\12\11\2\0\1\11\10\0\2\u0189\1\347\1\0" + "\5\u0189\1\0\1\u0189\4\0\1\u0189\2\0\1\u0189\3\0"
			+ "\3\u0189\3\0\1\347\4\0\1\u0189\21\0\7\u0189\16\0" + "\1\u018a\1\72\1\224\2\0\3\u018a\1\100\1\101\1\102"
			+ "\4\0\1\100\6\0\1\102\1\103\4\0\1\224\26\0" + "\3\u018a\1\72\1\u018a\1\103\17\0\1\u018b\1\72\1\224"
			+ "\2\0\3\u018b\1\100\1\101\1\102\4\0\1\100\6\0" + "\1\102\1\103\4\0\1\224\26\0\3\u018b\1\72\1\u018b"
			+ "\1\103\15\0\13\11\1\0\1\11\4\0\12\11\1\u018c" + "\20\11\11\0\12\11\2\0\1\11\10\0\2\u018d\1\347"
			+ "\1\0\5\u018d\1\0\1\u018d\4\0\1\u018d\2\0\1\u018d" + "\3\0\3\u018d\3\0\1\347\4\0\1\u018d\21\0\7\u018d"
			+ "\16\0\1\u018e\1\72\1\224\2\0\3\u018e\1\100\1\101" + "\1\102\4\0\1\100\6\0\1\102\1\103\4\0\1\224"
			+ "\26\0\3\u018e\1\72\1\u018e\1\103\17\0\1\u018f\1\72" + "\1\224\2\0\3\u018f\1\100\1\101\1\102\4\0\1\100"
			+ "\6\0\1\102\1\103\4\0\1\224\26\0\3\u018f\1\72" + "\1\u018f\1\103\15\0\13\11\1\0\1\11\4\0\4\11"
			+ "\1\u0190\26\11\11\0\12\11\2\0\1\11\10\0\2\u0191" + "\1\347\1\0\5\u0191\1\0\1\u0191\4\0\1\u0191\2\0"
			+ "\1\u0191\3\0\3\u0191\3\0\1\347\4\0\1\u0191\21\0" + "\7\u0191\16\0\1\u0192\1\72\1\224\2\0\3\u0192\1\100"
			+ "\1\101\1\102\4\0\1\100\6\0\1\102\1\103\4\0" + "\1\224\26\0\3\u0192\1\72\1\u0192\1\103\17\0\1\u0193"
			+ "\1\72\1\224\2\0\3\u0193\1\100\1\101\1\102\4\0" + "\1\100\6\0\1\102\1\103\4\0\1\224\26\0\3\u0193"
			+ "\1\72\1\u0193\1\103\15\0\13\11\1\0\1\11\4\0" + "\11\11\1\u0194\21\11\11\0\12\11\2\0\1\11\10\0"
			+ "\2\u0195\1\347\1\0\5\u0195\1\0\1\u0195\4\0\1\u0195" + "\2\0\1\u0195\3\0\3\u0195\3\0\1\347\4\0\1\u0195"
			+ "\21\0\7\u0195\16\0\1\u0196\1\72\1\224\2\0\3\u0196" + "\1\100\1\101\1\102\4\0\1\100\6\0\1\102\1\103"
			+ "\4\0\1\224\26\0\3\u0196\1\72\1\u0196\1\103\17\0" + "\1\u0197\1\72\1\224\2\0\3\u0197\1\100\1\101\1\102"
			+ "\4\0\1\100\6\0\1\102\1\103\4\0\1\224\26\0" + "\3\u0197\1\72\1\u0197\1\103\15\0\13\11\1\0\1\11"
			+ "\4\0\20\11\1\u0198\12\11\11\0\12\11\2\0\1\11" + "\10\0\2\u0199\1\347\1\0\5\u0199\1\0\1\u0199\4\0"
			+ "\1\u0199\2\0\1\u0199\3\0\3\u0199\3\0\1\347\4\0" + "\1\u0199\21\0\7\u0199\16\0\1\u019a\1\72\1\224\2\0"
			+ "\3\u019a\1\100\1\101\1\102\4\0\1\100\6\0\1\102" + "\1\103\4\0\1\224\26\0\3\u019a\1\72\1\u019a\1\103"
			+ "\17\0\1\u019b\1\72\1\224\2\0\3\u019b\1\100\1\101" + "\1\102\4\0\1\100\6\0\1\102\1\103\4\0\1\224"
			+ "\26\0\3\u019b\1\72\1\u019b\1\103\15\0\13\11\1\0" + "\1\11\4\0\17\11\1\u019c\13\11\11\0\12\11\2\0"
			+ "\1\11\10\0\2\u019d\1\347\1\0\5\u019d\1\0\1\u019d" + "\4\0\1\u019d\2\0\1\u019d\3\0\3\u019d\3\0\1\347"
			+ "\4\0\1\u019d\21\0\7\u019d\16\0\1\u019e\1\72\1\224" + "\2\0\3\u019e\1\100\1\101\1\102\4\0\1\100\6\0"
			+ "\1\102\1\103\4\0\1\224\26\0\3\u019e\1\72\1\u019e" + "\1\103\21\0\1\347\31\0\1\347\53\0\1\u019f\1\72"
			+ "\1\224\2\0\3\u019f\1\100\1\101\1\102\4\0\1\100" + "\6\0\1\102\1\103\4\0\1\224\26\0\3\u019f\1\72"
			+ "\1\u019f\1\103\17\0\1\u01a0\1\72\1\224\2\0\3\u01a0" + "\1\100\1\101\1\102\4\0\1\100\6\0\1\102\1\103"
			+ "\4\0\1\224\26\0\3\u01a0\1\72\1\u01a0\1\103\17\0" + "\1\u01a1\1\72\1\224\2\0\3\u01a1\1\100\1\101\1\102"
			+ "\4\0\1\100\6\0\1\102\1\103\4\0\1\224\26\0" + "\3\u01a1\1\72\1\u01a1\1\103\17\0\1\u01a2\1\72\1\224"
			+ "\2\0\3\u01a2\1\100\1\101\1\102\4\0\1\100\6\0" + "\1\102\1\103\4\0\1\224\26\0\3\u01a2\1\72\1\u01a2"
			+ "\1\103\17\0\2\72\1\224\2\0\3\72\1\100\1\101" + "\1\102\4\0\1\100\6\0\1\102\1\103\4\0\1\224"
			+ "\26\0\5\72\1\103\7\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[21816];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\3\0\1\11\1\1\1\11\1\1\1\11\4\1\3\11"
			+ "\24\1\5\11\3\1\1\11\2\1\2\11\3\1\1\11" + "\1\1\1\0\1\1\1\0\2\1\1\11\1\0\3\1"
			+ "\1\11\1\1\1\0\1\11\65\1\1\0\4\11\2\1" + "\11\11\12\1\1\0\1\11\5\1\1\0\77\1\1\0"
			+ "\1\11\1\0\1\11\1\0\11\11\64\1\1\0\45\1" + "\1\0\27\1\1\0\13\1\1\0\11\1\1\0\6\1"
			+ "\1\0\5\1\2\0\4\1\1\11\1\0\4\1\1\0" + "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0" + "\3\1\1\0\5\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[418];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of the
	 * yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the matched
	 * text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/**
	 * The number of occupied positions in zzBuffer beyond zzEndRead. When a
	 * lead/high surrogate has been read from the input stream into the final
	 * zzBuffer position, this will have a value of 1; otherwise, it will have a
	 * value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/* user code: */

	SymbolTable symtab;
	StringBuffer string = new StringBuffer();

	public JpqlScanner(StringReader jpqlReader, SymbolTable table) {
		this(jpqlReader);
		symtab = table;
	}

	public void setSymtab(SymbolTable symtab) {
		this.symtab = symtab;
	}

	private SymbolEntry sym(int type) {
		return new SymbolEntry(type, yyline + 1, yycolumn + 1);
	}

	private SymbolEntry sym(int type, Object value) {
		return new SymbolEntry(type, yyline + 1, yycolumn + 1, value);
	}

	public boolean hasNext() {
		try {
			return getNextToken().sym != EOF;
		} catch (IOException e) {
			LoggerUtils.error(getClass(), LoggerConstants.IO, e);
		}
		return false;
	}

	public SymbolEntry next() {
		try {
			return getNextToken();
		} catch (IOException e) {
			LoggerUtils.error(getClass(), LoggerConstants.IO, e);
		}
		return null;
	}

	private long parseLong(int start, int end, int radix) {
		long result = 0;
		long digit;

		for (int i = start; i < end; i++) {
			digit = Character.digit(yycharat(i), radix);
			result *= radix;
			result += digit;
		}
		return result;
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	public JpqlScanner(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 *
	 * @param in the java.io.Inputstream to read input from.
	 */
	public JpqlScanner(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in, java.nio.charset.Charset.forName("UTF-8")));
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x110000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 2900) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzBuffer.length * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int totalRead = 0;
		while (totalRead < requested) {
			int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
			if (numRead == -1) {
				break;
			}
			totalRead += numRead;
		}

		if (totalRead > 0) {
			zzEndRead += totalRead;
			if (totalRead == requested) { /* possibly more input available */
				if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				}
			}
			return false;
		}

		// totalRead = 0: End of stream
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the old
	 * reader.
	 *
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 *
	 * Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		zzFinalHighSurrogate = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
		if (zzBuffer.length > ZZ_BUFFERSIZE)
			zzBuffer = new char[ZZ_BUFFERSIZE];
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen". If this method is called, something is seriously
	 * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done in error fallback
	 * rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again. This number must not
	 *               be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @exception java.io.IOException if any I/O-Error occurs
	 */
	public SymbolEntry getNextToken() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			yychar += zzMarkedPosL - zzStartRead;

			boolean zzR = false;
			int zzCh;
			int zzCharCount;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL += zzCharCount) {
				zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
				zzCharCount = Character.charCount(zzCh);
				switch (zzCh) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else {
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn += zzCharCount;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 1: {
				throw new RuntimeException(
						"Illegal character \"" + yytext() + "\" at line " + yyline + ", column " + yycolumn);
			}
			case 129:
				break;
			case 2: { /* ignore */
			}
			case 130:
				break;
			case 3: {
				return sym(DIV);
			}
			case 131:
				break;
			case 4: {
				return sym(TIMES);
			}
			case 132:
				break;
			case 5: {
				return sym(IDENTIFIER, yytext());
			}
			case 133:
				break;
			case 6: {
				return sym(INTEGER_LITERAL, new Integer(yytext()));
			}
			case 134:
				break;
			case 7: {
				return sym(DOT);
			}
			case 135:
				break;
			case 8: {
				return sym(PLUS);
			}
			case 136:
				break;
			case 9: {
				yybegin(STRING);
				string.setLength(0);
			}
			case 137:
				break;
			case 10: {
				yybegin(CHARLITERAL);
			}
			case 138:
				break;
			case 11: {
				return sym(COLON);
			}
			case 139:
				break;
			case 12: {
				return sym(COMMA);
			}
			case 140:
				break;
			case 13: {
				return sym(LPAR);
			}
			case 141:
				break;
			case 14: {
				return sym(RPAR);
			}
			case 142:
				break;
			case 15: {
				return sym(QUESTION);
			}
			case 143:
				break;
			case 16: {
				return sym(MINUS);
			}
			case 144:
				break;
			case 17: {
				return sym(EQ);
			}
			case 145:
				break;
			case 18: {
				return sym(LE);
			}
			case 146:
				break;
			case 19: {
				return sym(GT);
			}
			case 147:
				break;
			case 20: {
				string.append(yytext());
			}
			case 148:
				break;
			case 21: {
				throw new RuntimeException("Unterminated string at end of line");
			}
			case 149:
				break;
			case 22: {
				yybegin(YYINITIAL);
				return sym(STRING_LITERAL, string.toString());
			}
			case 150:
				break;
			case 23: {
				throw new RuntimeException("Unterminated character literal at end of line");
			}
			case 151:
				break;
			case 24: {
				return sym(INTEGER_LITERAL, new Integer((int) parseLong(0, yylength(), 8)));
			}
			case 152:
				break;
			case 25: {
				return sym(FLOATING_POINT_LITERAL, new Double(yytext()));
			}
			case 153:
				break;
			case 26: {
				return sym(INTEGER_LITERAL, new Long(yytext().substring(0, yylength() - 1)));
			}
			case 154:
				break;
			case 27: {
				return sym(FLOATING_POINT_LITERAL, new Float(yytext().substring(0, yylength() - 1)));
			}
			case 155:
				break;
			case 28: {
				return sym(FLOATING_POINT_LITERAL, new Double(yytext().substring(0, yylength() - 1)));
			}
			case 156:
				break;
			case 29: {
				return sym(IN);
			}
			case 157:
				break;
			case 30: {
				return sym(IS);
			}
			case 158:
				break;
			case 31: {
				return sym(OF);
			}
			case 159:
				break;
			case 32: {
				return sym(ON);
			}
			case 160:
				break;
			case 33: {
				return sym(OR);
			}
			case 161:
				break;
			case 34: {
				return sym(AS);
			}
			case 162:
				break;
			case 35: {
				return sym(BY);
			}
			case 163:
				break;
			case 36: {
				return sym(GEQ);
			}
			case 164:
				break;
			case 37: {
				return sym(LEQ);
			}
			case 165:
				break;
			case 38: {
				return sym(UNEQ);
			}
			case 166:
				break;
			case 39: {
				throw new RuntimeException("Illegal escape sequence \"" + yytext() + "\"");
			}
			case 167:
				break;
			case 40: {
				char val = (char) Integer.parseInt(yytext().substring(1), 8);
				string.append(val);
			}
			case 168:
				break;
			case 41: {
				string.append('\f');
			}
			case 169:
				break;
			case 42: {
				string.append('\"');
			}
			case 170:
				break;
			case 43: {
				string.append('\'');
			}
			case 171:
				break;
			case 44: {
				string.append('\\');
			}
			case 172:
				break;
			case 45: {
				string.append('\b');
			}
			case 173:
				break;
			case 46: {
				string.append('\t');
			}
			case 174:
				break;
			case 47: {
				string.append('\n');
			}
			case 175:
				break;
			case 48: {
				string.append('\r');
			}
			case 176:
				break;
			case 49: {
				yybegin(YYINITIAL);
				return sym(CHARACTER_LITERAL, new Character(yytext().charAt(0)));
			}
			case 177:
				break;
			case 50: {
				return sym(INTEGER_LITERAL, new Long(parseLong(0, yylength() - 1, 8)));
			}
			case 178:
				break;
			case 51: {
				return sym(INTEGER_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));
			}
			case 179:
				break;
			case 52: {
				return sym(NOT);
			}
			case 180:
				break;
			case 53: {
				return sym(NEW);
			}
			case 181:
				break;
			case 54: {
				return sym(END);
			}
			case 182:
				break;
			case 55: {
				return sym(AND);
			}
			case 183:
				break;
			case 56: {
				return sym(ANY);
			}
			case 184:
				break;
			case 57: {
				return sym(ASC);
			}
			case 185:
				break;
			case 58: {
				return sym(ALL);
			}
			case 186:
				break;
			case 59: {
				return sym(ABS);
			}
			case 187:
				break;
			case 60: {
				return sym(AVG);
			}
			case 188:
				break;
			case 61: {
				return sym(SUM);
			}
			case 189:
				break;
			case 62: {
				return sym(SET);
			}
			case 190:
				break;
			case 63: {
				return sym(MIN);
			}
			case 191:
				break;
			case 64: {
				return sym(MOD);
			}
			case 192:
				break;
			case 65: {
				return sym(MAX);
			}
			case 193:
				break;
			case 66: {
				return sym(KEY);
			}
			case 194:
				break;
			case 67: {
				yybegin(YYINITIAL);
				int val = Integer.parseInt(yytext().substring(1, yylength() - 1), 8);
				return sym(CHARACTER_LITERAL, new Character((char) val));
			}
			case 195:
				break;
			case 68: {
				yybegin(YYINITIAL);
				return sym(CHARACTER_LITERAL, new Character('\f'));
			}
			case 196:
				break;
			case 69: {
				yybegin(YYINITIAL);
				return sym(CHARACTER_LITERAL, new Character('\"'));
			}
			case 197:
				break;
			case 70: {
				yybegin(YYINITIAL);
				return sym(CHARACTER_LITERAL, new Character('\''));
			}
			case 198:
				break;
			case 71: {
				yybegin(YYINITIAL);
				return sym(CHARACTER_LITERAL, new Character('\\'));
			}
			case 199:
				break;
			case 72: {
				yybegin(YYINITIAL);
				return sym(CHARACTER_LITERAL, new Character('\b'));
			}
			case 200:
				break;
			case 73: {
				yybegin(YYINITIAL);
				return sym(CHARACTER_LITERAL, new Character('\t'));
			}
			case 201:
				break;
			case 74: {
				yybegin(YYINITIAL);
				return sym(CHARACTER_LITERAL, new Character('\n'));
			}
			case 202:
				break;
			case 75: {
				yybegin(YYINITIAL);
				return sym(CHARACTER_LITERAL, new Character('\r'));
			}
			case 203:
				break;
			case 76: {
				return sym(INTEGER_LITERAL, new Long(parseLong(2, yylength() - 1, 16)));
			}
			case 204:
				break;
			case 77: {
				return sym(FROM);
			}
			case 205:
				break;
			case 78: {
				return sym(CASE);
			}
			case 206:
				break;
			case 79: {
				return sym(THEN);
			}
			case 207:
				break;
			case 80: {
				return sym(TRIM);
			}
			case 208:
				break;
			case 81: {
				return sym(TYPE);
			}
			case 209:
				break;
			case 82: {
				return sym(ELSE);
			}
			case 210:
				break;
			case 83: {
				return sym(DESC);
			}
			case 211:
				break;
			case 84: {
				return sym(SIZE);
			}
			case 212:
				break;
			case 85: {
				return sym(SOME);
			}
			case 213:
				break;
			case 86: {
				return sym(SQRT);
			}
			case 214:
				break;
			case 87: {
				return sym(WHEN);
			}
			case 215:
				break;
			case 88: {
				return sym(LIKE);
			}
			case 216:
				break;
			case 89: {
				return sym(LEFT);
			}
			case 217:
				break;
			case 90: {
				return sym(BOTH);
			}
			case 218:
				break;
			case 91: {
				return sym(JOIN);
			}
			case 219:
				break;
			case 92: {
				return sym(FETCH);
			}
			case 220:
				break;
			case 93: {
				return sym(UPPER);
			}
			case 221:
				break;
			case 94: {
				return sym(COUNT);
			}
			case 222:
				break;
			case 95: {
				return sym(TREAT);
			}
			case 223:
				break;
			case 96: {
				return sym(INNER);
			}
			case 224:
				break;
			case 97: {
				return sym(INDEX);
			}
			case 225:
				break;
			case 98: {
				return sym(OUTER);
			}
			case 226:
				break;
			case 99: {
				return sym(ORDER);
			}
			case 227:
				break;
			case 100: {
				return sym(ENTRY);
			}
			case 228:
				break;
			case 101: {
				return sym(EMPTY);
			}
			case 229:
				break;
			case 102: {
				return sym(WHERE);
			}
			case 230:
				break;
			case 103: {
				return sym(LOWER);
			}
			case 231:
				break;
			case 104: {
				return sym(GROUP);
			}
			case 232:
				break;
			case 105: {
				return sym(VALUE);
			}
			case 233:
				break;
			case 106: {
				return sym(UPDATE);
			}
			case 234:
				break;
			case 107: {
				return sym(NULLIF);
			}
			case 235:
				break;
			case 108: {
				return sym(CONCAT);
			}
			case 236:
				break;
			case 109: {
				return sym(OBJECT);
			}
			case 237:
				break;
			case 110: {
				return sym(ESCAPE);
			}
			case 238:
				break;
			case 111: {
				return sym(EXISTS);
			}
			case 239:
				break;
			case 112: {
				return sym(DELETE);
			}
			case 240:
				break;
			case 113: {
				return sym(SELECT);
			}
			case 241:
				break;
			case 114: {
				return sym(HAVING);
			}
			case 242:
				break;
			case 115: {
				return sym(LOCATE);
			}
			case 243:
				break;
			case 116: {
				return sym(LENGTH);
			}
			case 244:
				break;
			case 117: {
				return sym(MEMBER);
			}
			case 245:
				break;
			case 118: {
				return sym(LEADING);
			}
			case 246:
				break;
			case 119: {
				return sym(BETWEEN);
			}
			case 247:
				break;
			case 120: {
				return sym(FUNCTION);
			}
			case 248:
				break;
			case 121: {
				return sym(COALESCE);
			}
			case 249:
				break;
			case 122: {
				return sym(TRAILING);
			}
			case 250:
				break;
			case 123: {
				return sym(DISTINCT);
			}
			case 251:
				break;
			case 124: {
				return sym(SUBSTRING);
			}
			case 252:
				break;
			case 125: {
				return sym(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
			}
			case 253:
				break;
			case 126: {
				return sym(CURRENT_TIME);
			}
			case 254:
				break;
			case 127: {
				return sym(CURRENT_DATE);
			}
			case 255:
				break;
			case 128: {
				return sym(CURRENT_TIMESTAMP);
			}
			case 256:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					{
						return sym(EOF);
					}
				} else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
